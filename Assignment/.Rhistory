print(data.head())
data <- read.csv("Student_Grade_Prediction.csv")
data <- read.csv("Student_Grade_Prediction.csv")
data <- read_csv("Student_Grade_Prediction.csv")
data <- read.csv("C:\Users\Siddhesh Unhavane\Desktop\Data Stat Info\Student_Grade_Prediction.csv")
data <- read.csv("C:/Users/Siddhesh Unhavane/Desktop/Data Stat Info/Student_Grade_Prediction.csv")
print(data.head())
print(head(data))
View(head(data))
library(readr)
library(gmodels)
library(plyr)
library(DescTools)
library(dplyr)
library(car)
library(RVAideMemoire)
df <- read_csv('C:/Users/Asim/Desktop/Student_Grade_Prediction-1.csv')
View(df)
setwd('C:/Users/Siddhesh Unhavane/Desktop/Data Stat Info/Assignment')
library(readr)
emp <- read_csv('employee.csv', col_names = TRUE)
emp <- read.csv('employee.csv', col_names = TRUE)
emp <- read.csv('employee.csv')
View(emp)
dim(emp)
names(emp)
str(emp)
sum(is.na(emp))
# Converting 'Education' to numerical variable
emp$Education <- revalue(emp$Education, c("Bachelors"='1',"Masters"='2',"PHD"='3'))
library(plyr)
# Converting 'Education' to numerical variable
emp$Education <- revalue(emp$Education, c("Bachelors"='1',"Masters"='2',"PHD"='3'))
emp$Education <- as.numeric(emp$Education)
View(head(emp))
# Converting 'City' to numerical variable
unique(emp$City)
emp$City <- revalue(emp$City, c("Bangalore"='1',"Pune"='2',"New Delhi"='3'))
emp$City <- as.numeric(emp$City)
View(head(emp))
# Converting 'Gender' to numerical variable
unique(emp$Gender)
emp$Gender <- revalue(emp$Gender, c("Male"='1',"Female"='2'))
emp$Gender <- as.numeric(emp$Gender)
View(head(emp))
# Converting 'EverBenched' to numerical variable
unique(emp$EverBenched)
emp$EverBenched <- revalue(emp$EverBenched, c("Yes"='1',"No"='0'))
emp$EverBenched <- as.numeric(emp$EverBenched)
View(head(emp))
library(dplyr)
library(ggplot2)
library(rsample)
library(caret)
library(vip)
# Creating a 70-30 split for training and testing data respectively
set.seed(123)
split <- initial_split(emp, prop = .7, strata = "LeaveOrNot")
train <- training(split)
test  <- testing(split)
# QUESTION 1(a)
emp$LeaveOrNot <- as.factor(emp$LeaveOrNot)
# Creating a logistic regression model with LeaveOrNot as the target variable
log_reg <- glm(
LeaveOrNot ~ Education + JoiningYear + City + PaymentTier + Age + Gender + EverBenched + ExperienceInCurrentDomain,
family = 'binomial',
data = emp
)
# Getting the summary of the logistic regression model
summary(log_reg)
tidy(log_reg)
# Coefficients in exponential form
log_reg %>%
gtsummary::tbl_regression(exp = TRUE)
------------------------------------------------------------------------------------------------------------------------
# QUESTION 1(a)
emp$LeaveOrNot <- as.factor(emp$LeaveOrNot)
# QUESTION 1(a)
emp$LeaveOrNot <- as.factor(emp$LeaveOrNot)
train$any.event<- as.factor(train$any.event)
train$LeaveOrNot<- as.factor(train$LeaveOrNot)
# Training the model
log_reg = train(
form = LeaveOrNot ~ Education + JoiningYear + City + PaymentTier + Age + Gender + EverBenched + ExperienceInCurrentDomain,
data = train,
method = 'glm',
family = 'binomial'
)
# Predicting the dependent variable
pred <- predict(log_reg, test)
pred
# Confusion Matrix
confusionMatrix(pred, as.factor(test$LeaveOrNot))
log_reg_train <- glm(LeaveOrNot ~ Education + JoiningYear + City + PaymentTier + Age + Gender + EverBenched + ExperienceInCurrentDomain, data=train, family=binomial)
library(ROCR)
log_reg_test_prob <- log_reg_train %>% predict(test, type = "response")
log_reg_test_prob
preds <- prediction(as.numeric(log_reg_test_prob), test$LeaveOrNot)
perf <- performance(preds,"tpr","fpr")
plot(perf,colorize=TRUE)
library(precrec)
precrec_obj <- evalmod(scores = log_reg_test_prob, labels = test$LeaveOrNot)
autoplot(precrec_obj)
# Getting the AUC scores
sm_aucs <- auc(precrec_obj)
sm_aucs
precrec_obj2 <- evalmod(scores = log_reg_test_prob, labels = test$LeaveOrNot, mode="basic")
autoplot(precrec_obj2)
library(ROCit)
ROCit_obj <- rocit(score=log_reg_test_prob,class=test$LeaveOrNot)
plot(ROCit_obj)
summary(ROCit_obj)
measure <- measureit(score = log_reg_test_prob, class = test$LeaveOrNot,
measure = c("ACC", "MIS", "SENS", "SPEC", "PREC", "REC","PPV","NPV", "FSCR"))
measure
# Getting the summary of the logistic regression model
summary(log_reg)
# Coefficients in exponential form
log_reg %>%
gtsummary::tbl_regression(exp = TRUE)
tidy(log_reg)
# Coefficients in exponential form
log_reg %>%
gtsummary::tbl_regression(exp = TRUE)
# LIBRARY IMPORTS
library(readr)
library(plyr)
library(dplyr)
library(ggplot2)
library(rsample)
library(caret)
library(vip)
library(ROCR)
library(precrec)
library(ROCit)
# Setting up working directory
setwd('C:/Users/Siddhesh Unhavane/Desktop/Data Stat Info/Assignment')
# Reading the csv file
emp <- read.csv('employee.csv')
# Checking if the data is correctly read or not
View(emp)
# Checking the dimension of the dataset
dim(emp)
# Checking variable names
names(emp)
# Checking overall data structure of the dataset
str(emp)
# Checking if there is any missing data within the dataset
sum(is.na(emp))
# Converting 'Education' to numerical variable
emp$Education <- revalue(emp$Education, c("Bachelors"='1',"Masters"='2',"PHD"='3'))
emp$Education <- as.numeric(emp$Education)
View(head(emp))
# Converting 'City' to numerical variable
unique(emp$City)
emp$City <- revalue(emp$City, c("Bangalore"='1',"Pune"='2',"New Delhi"='3'))
emp$City <- as.numeric(emp$City)
View(head(emp))
# Converting 'Gender' to numerical variable
unique(emp$Gender)
emp$Gender <- revalue(emp$Gender, c("Male"='1',"Female"='2'))
emp$Gender <- as.numeric(emp$Gender)
View(head(emp))
# Converting 'EverBenched' to numerical variable
unique(emp$EverBenched)
emp$EverBenched <- revalue(emp$EverBenched, c("Yes"='1',"No"='0'))
emp$EverBenched <- as.numeric(emp$EverBenched)
View(head(emp))
# Creating a 70-30 split for training and testing data respectively
set.seed(123)
split <- initial_split(emp, prop = .7, strata = "LeaveOrNot")
train <- training(split)
test  <- testing(split)
# QUESTION 1(a)
emp$LeaveOrNot <- as.factor(emp$LeaveOrNot)
# Creating a logistic regression model with LeaveOrNot as the target variable
log_reg <- glm(
LeaveOrNot ~ Education + JoiningYear + City + PaymentTier + Age + Gender + EverBenched + ExperienceInCurrentDomain,
family = 'binomial',
data = emp
)
# Getting the summary of the logistic regression model
summary(log_reg)
tidy(log_reg)
# Coefficients in exponential form
log_reg %>%
gtsummary::tbl_regression(exp = TRUE)
train$LeaveOrNot<- as.factor(train$LeaveOrNot)
train$LeaveOrNot<- as.factor(train$LeaveOrNot)
# Training the model
log_reg = train(
form = LeaveOrNot ~ Education + JoiningYear + City + PaymentTier + Age + Gender + EverBenched + ExperienceInCurrentDomain,
data = train,
method = 'glm',
family = 'binomial'
)
# Predicting the dependent variable
pred <- predict(log_reg, test)
pred
# Confusion Matrix
confusionMatrix(pred, as.factor(test$LeaveOrNot))
log_reg_train <- glm(LeaveOrNot ~ Education + JoiningYear + City + PaymentTier + Age + Gender + EverBenched + ExperienceInCurrentDomain, data=train, family=binomial)
log_reg_test_prob <- log_reg_train %>% predict(test, type = "response")
log_reg_test_prob
preds <- prediction(as.numeric(log_reg_test_prob), test$LeaveOrNot)
perf <- performance(preds,"tpr","fpr")
plot(perf,colorize=TRUE)
precrec_obj <- evalmod(scores = log_reg_test_prob, labels = test$LeaveOrNot)
autoplot(precrec_obj)
# Getting the AUC scores
sm_aucs <- auc(precrec_obj)
sm_aucs
